



import React, { useState, useEffect, useContext, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import axios from '../config/axios';
import { initializeSocket, receiveMessage, sendMessage } from '../config/socket';
import { UserContext } from '../context/user.context';

const Project = () => {
    const location = useLocation();
    const navigate = useNavigate();

    const [isSidePanelOpen, setIsSidePanelOpen] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedUserId, setSelectedUserId] = useState(new Set());
    const [project, setProject] = useState(location.state.project);
    const [message, setMessage] = useState("");
    const { user } = useContext(UserContext);
    const messageBoxRef = useRef(null);

    const [users, setUsers] = useState([]);

    useEffect(() => {
        initializeSocket(project._id);

        receiveMessage('project-message', (data) => {
            console.log(data);
            appendIncomingMessage(data);
        });

        axios.get(`/projects/get-project/${location.state.project._id}`).then(res => {
            setProject(res.data.project);
        });

        axios.get('/users/all').then(res => {
            setUsers(res.data.users);
        }).catch(err => {
            console.log(err);
        });
    }, []);

    function send() {
        if (!message.trim()) return; // Prevent sending empty messages

        sendMessage('project-message', {
            message,
            sender: user,
        });

        appendOutgoingMessage(message);
        setMessage(""); // Clear input field
    }

    function appendIncomingMessage(MessageObject) {
        const messageBox = messageBoxRef.current;
        if (!messageBox) return;

        const newMessage = document.createElement('div');
        newMessage.classList.add('message', 'max-w-56', 'flex', 'flex-col', 'p-2', 'bg-gray-200', 'w-fit', 'rounded-xl');
        newMessage.innerHTML = `
            <small class="opacity-75">${MessageObject.sender.email}</small>
            <p class="text-sm">${MessageObject.message}</p>
        `;

        messageBox.appendChild(newMessage);
        messageBox.scrollTop = messageBox.scrollHeight; // Auto-scroll to the bottom
    }

    function appendOutgoingMessage(message) {
        const messageBox = messageBoxRef.current;
        if (!messageBox) return;

        const newMessage = document.createElement('div');
        newMessage.classList.add('message', 'ml-auto', 'max-w-56', 'flex', 'flex-col', 'p-2', 'bg-green-200', 'w-fit', 'rounded-xl');
        newMessage.innerHTML = `
            <small class="opacity-75">${user.email}</small>
            <p class="text-sm">${message}</p>
        `;

        messageBox.appendChild(newMessage);
        messageBox.scrollTop = messageBox.scrollHeight; // Auto-scroll to the bottom
    }

    return (
        <main className='h-screen w-screen flex'>
            <section className='relative flex flex-col left h-screen min-w-80 bg-blue-300'>
                <header className='flex justify-between items-center absolute p-2 px-5 w-full bg-slate-100'>
                    <button onClick={() => setIsModalOpen(true)} className='flex gap-2'>
                        <i className="ri-add-fill mr-1"></i>
                        <p>Add Collaborator</p>
                    </button>
                    <button onClick={() => setIsSidePanelOpen(!isSidePanelOpen)} className='p-2 rounded-full'>
                        <i className="ri-group-fill"></i>
                    </button>
                </header>

                {/* Conversation Area */}
                <div className="conversation-area pt-14 pb-14 flex-grow flex flex-col h-full relative overflow-hidden">
                    <div
                        ref={messageBoxRef}
                        className="message-box flex-grow flex flex-col m-1 gap-1 overflow-y-auto px-2"
                        style={{ maxHeight: "100%", minHeight: "0" }}
                    >
                        {/* Messages will be appended here */}
                    </div>

                    {/* Fixed Input Field */}
                    <div className="inputField w-full flex absolute bottom-0 bg-white border-t p-2">
                        <input
                            value={message}
                            onChange={(e) => setMessage(e.target.value)}
                            className='flex-grow p-2 px-3 border rounded-lg outline-none'
                            type="text"
                            placeholder='Enter Message'
                        />
                        <button
                            onClick={send}
                            className='p-2 bg-black text-white rounded-lg ml-2'>
                            <i className="ri-send-plane-fill"></i>
                        </button>
                    </div>
                </div>

                {/* Side Panel */}
                <div className={`sidepanel flex flex-col gap-2 w-full h-full bg-blue-950 absolute transition-all duration-300 ${isSidePanelOpen ? 'left-0' : '-left-full'} top-0`}>
                    <header className='flex justify-between items-center p-4 px-5 w-full bg-slate-300'>
                        <h2 className='font-semibold'>Collaborators</h2>
                        <button onClick={() => setIsSidePanelOpen(!isSidePanelOpen)}>
                            <i className="ri-close-line"></i>
                        </button>
                    </header>

                    <div className="user flex flex-col gap-2 cursor-pointer p-2 overflow-auto">
                        {project.users && project.users.map(user => (
                            <div key={user.email} className="flex gap-2 items-center hover:bg-slate-600 rounded-e-full">
                                <div className='aspect-square rounded-full p-4 text-white w-fit h-fit items-center justify-center bg-slate-800'>
                                    <i className="ri-user-fill"></i>
                                </div>
                                <h2 className='font-semibold text-lg '>{user.email}</h2>
                            </div>
                        ))}
                    </div>
                </div>
            </section>

            {/* Modal */}
            {isModalOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                    <div className="bg-white p-4 rounded-md w-96 max-w-full relative">
                        <header className="flex justify-between items-center mb-4">
                            <h2 className="text-xl font-semibold">Select User</h2>
                            <button onClick={() => setIsModalOpen(false)} className="p-2">
                                <i className="ri-close-fill"></i>
                            </button>
                        </header>
                        <div className="users-list flex flex-col gap-2 mb-16 max-h-96 overflow-auto">
                            {users.map((user) => (
                                <div
                                    key={user.id}
                                    className={`user cursor-pointer hover:bg-slate-300 ${selectedUserId.has(user._id) ? 'bg-slate-500' : ''
                                        } p-2 flex gap-2 items-center`}
                                    onClick={() => {
                                        setSelectedUserId(prev => {
                                            const newSet = new Set(prev);
                                            newSet.has(user._id) ? newSet.delete(user._id) : newSet.add(user._id);
                                            return newSet;
                                        });
                                    }}
                                >
                                    <div className="aspect-square relative rounded-full w-fit h-fit flex items-center justify-center p-5 text-white bg-slate-700">
                                        <i className="ri-user-fill absolute"></i>
                                    </div>
                                    <h1 className="font-semibold text-lg">{user.email}</h1>
                                </div>
                            ))}
                        </div>
                        <button onClick={() => setIsModalOpen(false)} className='absolute bottom-4 left-1/2 transform -translate-x-1/2 px-4 py-2 bg-blue-600 text-white rounded-md'>
                            Add Collaborators
                        </button>
                    </div>
                </div>
            )}
        </main>
    );
};

export default Project;





// io.use(async (socket, next) => {

//     try {

//         const token = socket.handshake.auth?.token || socket.handshake.headers.authorization?.split(' ')[ 1 ];
       
//         if (!token) {
//             return next(new Error('Authentication error'))
//         }

//         const decoded = jwt.verify(token, process.env.JWT_SECRET);

//         if (!decoded) {
//             return next(new Error('Authentication error'))
//         }


//         socket.user = decoded;

//         next();

//     } catch (error) {
//         next(error)
//     }

// })



import React, { useState, useEffect, useContext } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import axios from '../config/axios';
import { initializeSocket, receiveMessage, sendMessage } from '../config/socket';
import { UserContext } from '../context/user.context';


const Project = () => {
    const location = useLocation();
    const navigate = useNavigate();

    const [isSidePanelOpen, setIsSidePanelOpen] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedUserId, setSelectedUserId] = useState([]);
    const [project, setProject] = useState(location.state.project);
    const [message, setMessage] = useState([]);
    const {user} = useContext(UserContext)
    const messageBox =React.createRef();

    const [users, setUsers] = useState([]);

    useEffect(() => {

        initializeSocket(project._id);

        receiveMessage('project-message', data => {
            console.log(data);
            appendIncomingMessage(data)

        })



        axios.get(/projects/get-project/${location.state.project._id}).then(res => {
            console.log(res.data.project);

            setProject(res.data.project)
        })


        axios.get('/users/all').then(res => {

            setUsers(res.data.users)

        }).catch(err => {

            console.log(err)

        })
    }, []);

    const handleUserClick = (id) => {
        setSelectedUserId(prevSelectedUserId => {
            const newSelectedUserId = new Set(prevSelectedUserId);
            if (newSelectedUserId.has(id)) {
                newSelectedUserId.delete(id);
            } else {
                newSelectedUserId.add(id);
            }

            // console.log(newSelectedUserId);
            return newSelectedUserId;
        });



    }



    function addCollaborators() {

        axios.put("/projects/add-user", {
            projectId: location.state.project._id,
            users: Array.from(selectedUserId)
        }).then(res => {
            console.log(res.data)
            setIsModalOpen(false)

        }).catch(err => {
            console.log(err)
        })

    }

    function send(){
        // console.log(user);
        
        sendMessage('project-message',{
            message,
            sender: user
        })
        appendOutgoingMessage(message);

        setMessage("")
    }

    function appendIncomingMessage(MessageObject){
        const messageBox = document.querySelector('.message-box');
        const message = document.createElement('div')
        message.classList.add('message', 'max-w-56', 'flex', 'flex-col', 'p-2', 'bg-green-200', 'w-fit', 'rounded-xl')
        message.innerHTML = 
         <small class="opacity-75">${user.email}</small>
            <p class="text-sm">${MessageObject.message}</p>

        
        messageBox.appendChild(message);

    }
    function appendOutgoingMessage(message){
        const messageBox = document.querySelector('.message-box');
        const newMessage = document.createElement('div')
        newMessage.classList.add('message','ml-auto', 'max-w-56', 'flex', 'flex-col', 'p-2', 'bg-green-200', 'w-fit', 'rounded-xl')
        newMessage.innerHTML = 
         <small class="opacity-75">${user.email}</small>
            <p class="text-sm">${message}</p>

        
        messageBox.appendChild(newMessage);

    }

   





    return (
        <main
            className='h-screen w-screen flex'

        >
            <section className='relative flex flex-col left h-screen min-w-80 bg-blue-300'>
                <header
                    className='flex right justify-between items-center absolute p-2 px-5 w-full bg-slate-100' >
                    <button
                        onClick={() => setIsModalOpen(true)}
                        className='flex gap-2'>
                        <i className="ri-add-fill mr-1"></i>
                        <p>add collborater</p>
                    </button>
                    <button
                        onClick={() => setIsSidePanelOpen(!isSidePanelOpen)}
                        className='p-2 rounded-full'>

                        <i className="ri-group-fill"></i>
                    </button>
                </header>

                <div className="conversation-area pt-14 pb-10 flex-grow flex flex-col h-full relative">

                    <div 
                    ref={messageBox}
                    className="message-box flex-grow flex flex-col m-1 gap-1 ">
                        

                    </div>

                    <div className="inputField w-full flex absolute bottom-0">
                        <input 
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        className='p-2 px-9 border-none outline-none'
                            type="text" placeholder='Enter Message' />
                        <button
                        onClick={send}
                            className='flex-grow p-0 bg-black text-white '>
                            <i className="ri-send-plane-fill"></i>
                        </button>
                    </div>
                </div>



                <div
                    className={sidepanel flex flex-col gap-2 w-full h-full bg-blue-950 absolute transition-all duration-300 ${isSidePanelOpen ? 'left-0' : '-left-full'} top-0}
                >
                    <header
                        className='flex justify-between items-center p-4 px-5 w-full bg-slate-300' >
                        <h2 className='font-semibold'>Colaboraters</h2>
                        <button
                            onClick={() => setIsSidePanelOpen(!isSidePanelOpen)}>
                            <i className="ri-close-line"></i>
                        </button>
                    </header>

                    <div className="user flex flex-col gap-2 cursor-pointer p-2 ">
                        {project.users && project.users.map(user => {

                            return (
                                <div className="user flex gap-2 items-center hover:bg-slate-600 rounded-e-full">
                                    <div className='aspect-square rounded-full p-4  text-white w-fit h-fit items-center justify-center bg-slate-800'>
                                        <i className="ri-user-fill"></i>
                                    </div>
                                    <h2 className='font-semibold text-lg '>{user.email}</h2>
                                </div>
                            )
                        })}
                    </div>

                </div>



            </section>

            {isModalOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                    <div className="bg-white p-4 rounded-md w-96 max-w-full relative">
                        <header className="flex justify-between items-center mb-4">
                            <h2 className="text-xl font-semibold">Select User</h2>
                            <button onClick={() => setIsModalOpen(false)} className="p-2">
                                <i className="ri-close-fill"></i>
                            </button>
                        </header>
                        <div className="users-list flex flex-col gap-2 mb-16 max-h-96 overflow-auto">
                            {users.map((user) => (
                                <div
                                    key={user.id}
                                    className={user cursor-pointer hover:bg-slate-300 ${Array.from(selectedUserId).indexOf(user._id) != -1 ? 'bg-slate-500' : ''
                                        } p-2 flex gap-2 items-center}
                                    onClick={() => handleUserClick(user._id)}
                                >
                                    <div className="aspect-square relative rounded-full w-fit h-fit flex items-center justify-center p-5 text-white bg-slate-700">
                                        <i className="ri-user-fill absolute"></i>
                                    </div>
                                    <h1 className="font-semibold text-lg">{user.email}</h1>
                                </div>
                            ))}
                        </div>
                        <button
                            onClick={addCollaborators}
                            className='absolute bottom-4 left-1/2 transform -translate-x-1/2 px-4 py-2 bg-blue-600 text-white rounded-md'>
                            Add Collaborators
                        </button>
                    </div>
                </div>
            )}



        </main>
    );
};

export default Project;



//home


/* import React, { useContext, useState, useEffect } from 'react'
import { UserContext } from '../context/user.context'
import axios from "../config/axios"
import { useNavigate } from 'react-router-dom'

const Home = () => {

    const { user } = useContext(UserContext)
    const [ isModalOpen, setIsModalOpen ] = useState(false)
    const [ projectName, setProjectName ] = useState(null)
    const [ project, setProject ] = useState([])

    const navigate = useNavigate()

    function createProject(e) {
        e.preventDefault()
        console.log({ projectName })

        axios.post('/projects/create', {
            name: projectName,
        })
            .then((res) => {
                console.log(res)
                setIsModalOpen(false)
            })
            .catch((error) => {
                console.log(error)
            })
    }

    useEffect(() => {
        axios.get('/projects/all').then((res) => {
            console.log(res.data);
            
            setProject(res.data.projects)

        }).catch(err => {
            console.log(err)
        })

    }, [])

    return (
        <main className='p-4'>
            <div className="projects flex flex-wrap gap-3">
                <button
                    onClick={() => setIsModalOpen(true)}
                    className="project p-4 border border-slate-300 rounded-md">
                    New Project
                    <i className="ri-link ml-2"></i>
                </button>



            </div>
               {
                project.map((project) => (
                    <div key={project._id} className="project p-4 border border-slate-300 rounded-md">
                        <h2>{project.name}</h2>
                        <i className="ri-link ml-2"></i>

                    </div>
                ))
               }

            {isModalOpen && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
                    <div className="bg-white p-6 rounded-md shadow-md w-1/3">
                        <h2 className="text-xl mb-4">Create New Project</h2>
                        <form onSubmit={createProject}>
                            <div className="mb-4">
                                <label className="block text-sm font-medium text-gray-700">Project Name</label>
                                <input
                                    onChange={(e) => setProjectName(e.target.value)}
                                    value={projectName}
                                    type="text" className="mt-1 block w-full p-2 border border-gray-300 rounded-md" required />
                            </div>
                            <div className="flex justify-end">
                                <button type="button" className="mr-2 px-4 py-2 bg-gray-300 rounded-md" onClick={() => setIsModalOpen(false)}>Cancel</button>
                                <button type="submit" className="px-4 py-2 bg-red-600 text-white rounded-md">Create</button>
                            </div>
                        </form>
                    </div>
                </div>
            )}


        </main>
    )
}

export default Home */


//*************** */

// import React, { useContext, useState, useEffect } from 'react'
// import { UserContext } from '../context/user.context'
// import axios from "../config/axios"
// import { useNavigate } from 'react-router-dom'

// const Home = () => {
//     const { user } = useContext(UserContext)
//     const [isModalOpen, setIsModalOpen] = useState(false)
//     const [projectName, setProjectName] = useState("")
//     const [project, setProject] = useState([])

//     const navigate = useNavigate()

//     function createProject(e) {
//         e.preventDefault()
//         console.log({ projectName })

//         axios.post('/projects/create', {
//             name: projectName,
//         })
//             .then((res) => {
//                 console.log(res)
//                 setProject([...project, res.data.project])  // Update state with new project
//                 setIsModalOpen(false)
//                 setProjectName("")  // Clear input field
//             })
//             .catch((error) => {
//                 console.log(error)
//             })
//     }

//     useEffect(() => {
//         axios.get('/projects/all')
//             .then((res) => {
//                 if (res.data && res.data.projects) {
//                     setProject(res.data.projects)
//                 }
//             })
//             .catch(err => {
//                 console.log("Error fetching projects:", err)
//             })
//     }, [])

//     return (
//         <main className='p-4'>
//             <div className="projects flex flex-wrap gap-3">
//                 <button
//                     onClick={() => setIsModalOpen(true)}
//                     className="project p-4 border border-slate-300 rounded-md">
//                     New Project
//                     <i className="ri-link ml-2"></i>
//                 </button>

//                 {project.map((project) => (
//                     <div key={project._id}
//                         onClick={() => {
//                             navigate(`/project`, {
//                                 state: { project }
//                             })
//                         }}
//                         className="project flex flex-col gap-2 cursor-pointer p-4 border border-slate-300 rounded-md min-w-52 hover:bg-slate-200">
//                         <h2 className='font-semibold'>{project.name}</h2>

//                         <div className="flex gap-2">
//                             <p> <small> <i className="ri-user-line"></i> Collaborators</small> :</p>
//                             {project.users ? project.users.length : 0}
//                         </div>

//                     </div>
//                 ))}
//             </div>

//             {isModalOpen && (
//                 <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
//                     <div className="bg-white p-6 rounded-md shadow-md w-1/3">
//                         <h2 className="text-xl mb-4">Create New Project</h2>
//                         <form onSubmit={createProject}>
//                             <div className="mb-4">
//                                 <label className="block text-sm font-medium text-gray-700">Project Name</label>
//                                 <input
//                                     onChange={(e) => setProjectName(e.target.value)}
//                                     value={projectName}
//                                     type="text" className="mt-1 block w-full p-2 border border-gray-300 rounded-md" required />
//                             </div>
//                             <div className="flex justify-end">
//                                 <button type="button" className="mr-2 px-4 py-2 bg-gray-300 rounded-md" onClick={() => setIsModalOpen(false)}>Cancel</button>
//                                 <button type="submit" className="px-4 py-2 bg-blue-600 text-white rounded-md">Create</button>
//                             </div>
//                         </form>
//                     </div>
//                 </div>
//             )}
//         </main>
//     )
// }

// export default Home




































{/* <button
                                onClick={async () => {
                                    await webContainer.mount(fileTree);

                                    // Check if an HTML file exists in the fileTree
                                    // const htmlFileExists = Object.values(fileTree).some(file => file?.file && file.file.name.endsWith('.html'));
                                    const htmlFileExists = Object.values(fileTree).some(file => file?.file?.name?.endsWith('.html'));


                                    if (htmlFileExists) {
                                        // Run a simple HTTP server for HTML files
                                        if (runProcess) {
                                            runProcess.kill();
                                        }

                                        let tempRunProcess = await webContainer.spawn("python3", ["-m", "http.server"]);

                                        tempRunProcess.output.pipeTo(new WritableStream({
                                            write(chunk) {
                                                console.log(chunk);
                                            }
                                        }));

                                        setRunProcess(tempRunProcess);

                                        webContainer.on('server-ready', (port, url) => {
                                            console.log(port, url);
                                            setIframeUrl(url);
                                        });
                                    } else {
                                        // Run npm start for other project types (if needed)
                                        const installProcess = await webContainer.spawn("npm", ["install"]);

                                        installProcess.output.pipeTo(new WritableStream({
                                            write(chunk) {
                                                console.log(chunk);
                                            }
                                        }));

                                        await installProcess.exit;

                                        if (runProcess) {
                                            runProcess.kill();
                                        }

                                        let tempRunProcess = await webContainer.spawn("npm", ["start"]);

                                        tempRunProcess.output.pipeTo(new WritableStream({
                                            write(chunk) {
                                                console.log(chunk);
                                            }
                                        }));

                                        setRunProcess(tempRunProcess);

                                        webContainer.on('server-ready', (port, url) => {
                                            console.log(port, url);
                                            setIframeUrl(url);
                                        });
                                    }
                                }}
                                className='p-2 px-4 bg-blue-600 text-white rounded-md'
                            >
                                run
                            </button> */}


                            {/* <button
                                onClick={async () => {
                                    try {
                                        await webContainer.mount(fileTree);

                                        // Check if package.json exists
                                        if (fileTree['package.json']) {
                                            const installProcess = await webContainer.spawn("npm", ["install"]);
                                            installProcess.output.pipeTo(new WritableStream({
                                                write(chunk) {
                                                    console.log(chunk);
                                                }
                                            }));

                                            if (runProcess) {
                                                runProcess.kill();
                                            }

                                            const startProcess = await webContainer.spawn("npm", ["start"]);
                                            startProcess.output.pipeTo(new WritableStream({
                                                write(chunk) {
                                                    console.log(chunk);
                                                }
                                            }));
                                            setRunProcess(startProcess);
                                        } else {
                                            //If no package.json, run the first javascript file that is found.
                                            let mainJsFile = Object.keys(fileTree).find(file => file.endsWith(".js"))
                                            if (mainJsFile) {
                                                if (runProcess) {
                                                    runProcess.kill();
                                                }
                                                const startProcess = await webContainer.spawn("node", [mainJsFile]);
                                                startProcess.output.pipeTo(new WritableStream({
                                                    write(chunk) {
                                                        console.log(chunk);
                                                    }
                                                }));
                                                setRunProcess(startProcess);
                                            } else {
                                                console.log("no javascript file found to run.")
                                            }

                                        }

                                        webContainer.on('server-ready', (port, url) => {
                                            console.log(port, url);
                                            setIframeUrl(url);
                                        });
                                    } catch (error) {
                                        console.error("Error running code:", error);
                                        setMessages(prevMessages => [...prevMessages, { sender: user, message: "Error running code." }]);
                                    }
                                }}
                                className='p-2 px-4 bg-slate-500 text-white rounded-md'
                            >
                                run
                            </button> 
*/}











//final code 



import React, { useState, useEffect, useContext, useRef } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import axios from "../config/axios";
import { initializeSocket, receiveMessage, sendMessage } from "../config/socket";
import { UserContext } from "../context/user.context";
import Markdown from "markdown-to-jsx";
import { getWebContainer } from "../config/webcontainer";
import hljs from "highlight.js";
import "highlight.js/styles/github-dark.css";

function SyntaxHighlightedCode(props) {
  const ref = useRef(null);

  React.useEffect(() => {
    if (ref.current && props.className?.includes("lang-") && window.hljs) {
      window.hljs.highlightElement(ref.current);
      ref.current.removeAttribute("data-highlighted");
    }
  }, [props.className, props.children]);

  return <code {...props} ref={ref} />;
}

const Project = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { user } = useContext(UserContext);
  const messageBoxRef = useRef(null);

  const [isSidePanelOpen, setIsSidePanelOpen] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedUserId, setSelectedUserId] = useState(new Set());
  const [project, setProject] = useState(location.state.project);
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([]);
  const [users, setUsers] = useState([]);
  const [fileTree, setFileTree] = useState({});
  const [currentFile, setCurrentFile] = useState(null);
  const [openFiles, setOpenFiles] = useState([]);
  const [webContainer, setWebContainer] = useState(null);
  const [iframeUrl, setIframeUrl] = useState(null);
  const [runProcess, setRunProcess] = useState(null);
  const [isCopied, setIsCopied] = useState(false);

  useEffect(() => {
    initializeSocket(project._id);
    if (!webContainer) {
      getWebContainer().then((container) => {
        setWebContainer(container);
        console.log("Container started");
      });
    }

    receiveMessage("project-message", (data) => {
      if (data.sender._id === "ai") {
        const message = JSON.parse(data.message);
        webContainer?.mount(message.fileTree);
        if (message.fileTree) setFileTree(message.fileTree || {});
        setMessages((prev) => [...prev, data]);
      } else {
        setMessages((prev) => [...prev, data]);
      }
    });

    axios.get(`/projects/get-project/${project._id}`).then((res) => {
      setProject(res.data.project);
      setFileTree(res.data.project.fileTree || {});
      setMessages(res.data.project.chatHistory || []);
    });

    axios
      .get("/users/all")
      .then((res) => setUsers(res.data.users))
      .catch((err) => console.log(err));
  }, [project._id, webContainer]);

  useEffect(() => {
    if (messageBoxRef.current) {
      messageBoxRef.current.scrollTop = messageBoxRef.current.scrollHeight;
    }
  }, [messages]);

  const saveFileTree = (ft) => {
    axios
      .put("/projects/update-file-tree", {
        projectId: project._id,
        fileTree: ft,
      })
      .then((res) => console.log(res.data))
      .catch((err) => console.log(err));
  };

  const send = () => {
    if (!message.trim()) return;
    sendMessage("project-message", { message, sender: user });
    setMessages((prev) => [...prev, { sender: user, message }]);
    setMessage("");
    saveChatMessage({ sender: user, message });
  };

  const saveChatMessage = (msg) => {
    axios
      .put("/projects/update-chat-history", {
        projectId: project._id,
        chatHistory: [...messages, msg],
      })
      .then(() => console.log("Chat message saved"))
      .catch((err) => console.error("Error saving chat message:", err));
  };

  const addCollaborators = () => {
    axios
      .put("/projects/add-user", {
        projectId: project._id,
        users: Array.from(selectedUserId),
      })
      .then((res) => {
        console.log(res.data);
        setIsModalOpen(false);
      })
      .catch((err) => console.log(err));
  };

  const handleCopy = () => {
    if (fileTree[currentFile]) {
      navigator.clipboard.writeText(fileTree[currentFile].file.contents);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    }
  };

  const WriteAiMessage = (message) => {
    const messageObject = JSON.parse(message);
    return (
      <div className="overflow-auto bg-gradient-to-r from-indigo-600 to-blue-500 text-white rounded-xl p-4 shadow-md">
        <Markdown
          children={messageObject.text}
          options={{ overrides: { code: SyntaxHighlightedCode } }}
        />
      </div>
    );
  };

  return (
    <main className="h-screen w-screen flex font-poppins bg-gradient-to-br from-gray-100 to-gray-200">
      {/* Chat Section */}
      <section className="relative flex flex-col h-screen min-w-80 bg-white rounded-xl shadow-lg">
        <header className="flex justify-between items-center p-4 bg-gradient-to-r from-indigo-600 to-blue-500 text-white rounded-t-xl shadow-md">
          <button
            onClick={() => setIsModalOpen(true)}
            className="flex gap-2 items-center px-4 py-2 bg-white text-indigo-600 rounded-full hover:bg-indigo-100 transition-all duration-300 font-semibold"
          >
            <i className="ri-add-fill"></i> Add Collaborator
          </button>
          <button
            onClick={() => setIsSidePanelOpen(!isSidePanelOpen)}
            className="p-3 bg-white text-indigo-600 rounded-full hover:bg-indigo-100 transition-all duration-300"
          >
            <i className="ri-group-fill"></i>
          </button>
        </header>

        <div className="conversation-area flex-grow flex flex-col h-full overflow-hidden bg-gray-50 pb-20">
          <div
            ref={messageBoxRef}
            className="message-box flex-grow flex flex-col m-4 gap-3 overflow-y-auto px-4"
          >
            {messages.map((msg, index) => (
              <div
                key={index}
                className={`p-4 rounded-xl shadow-md w-fit max-w-xs ${msg.sender._id === "ai"
                  ? "bg-gradient-to-r from-indigo-600 to-blue-500 text-white"
                  : "bg-gradient-to-r from-gray-700 to-gray-600 text-white " +
                  (msg.sender._id === user._id.toString() ? "ml-auto" : "")
                  }`}
              >
                <small className="opacity-70 text-xs block">{msg.sender.email}</small>
                <div className="text-sm mt-2">
                  {msg.sender._id === "ai" ? WriteAiMessage(msg.message) : <p>{msg.message}</p>}
                </div>
              </div>
            ))}
          </div>

          <div className="inputField w-full flex absolute bottom-0 bg-white shadow-md border-t p-4 items-center">
            <input
              value={message}
              onKeyDown={(e) => e.key === "Enter" && send()}
              onChange={(e) => setMessage(e.target.value)}
              className="flex-grow p-3 bg-gray-50 text-gray-800 rounded-full border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
              type="text"
              placeholder="Type a message..."
            />
            <button
              onClick={send}
              className="p-3 bg-gradient-to-r from-indigo-500 to-blue-400 text-white rounded-full ml-3 shadow-md hover:from-indigo-600 hover:to-blue-500 transition-all duration-300"
            >
              <i className="ri-send-plane-fill"></i>
            </button>
          </div>
        </div>

        <div
          className={`sidepanel flex flex-col gap-3 w-full h-full bg-gray-50 shadow-lg absolute transition-all duration-300 ${isSidePanelOpen ? "left-0" : "-left-full"
            } top-0 rounded-xl`}
        >
          <header className="flex justify-between items-center p-4 bg-gradient-to-r from-indigo-600 to-blue-500 text-white shadow-md rounded-t-xl">
            <h2 className="font-semibold text-lg">Collaborators</h2>
            <button onClick={() => setIsSidePanelOpen(!isSidePanelOpen)} className="text-white">
              <i className="ri-close-line"></i>
            </button>
          </header>
          <div className="user-list flex flex-col gap-3 p-4 overflow-auto">
            {project.users &&
              project.users.map((user) => (
                <div
                  key={user.email}
                  className="flex gap-4 items-center hover:bg-gray-200 rounded-xl p-3 transition duration-200 cursor-pointer"
                >
                  <div className="w-10 h-10 flex items-center justify-center bg-indigo-500 text-white rounded-full">
                    <i className="ri-user-fill"></i>
                  </div>
                  <h2 className="font-semibold text-gray-800">{user.email}</h2>
                </div>
              ))}
          </div>
        </div>
      </section>


      <section className="flex-grow h-full flex p-4">
        <div className="explorer h-full max-w-72 min-w-56 p-4 bg-gradient-to-br from-indigo-500 to-blue-400 border border-indigo-600 rounded-xl shadow-lg text-white">
          <h2 className="font-semibold text-lg text-center mb-4">
            <i className="ri-folder-3-fill mr-2"></i>File Explorer
          </h2>
          <div className="file-tree space-y-3">
            {Object.keys(fileTree).map((file, index) => (
              <div
                key={index}
                onClick={() => {
                  setCurrentFile(file);
                  setOpenFiles([...new Set([...openFiles, file])]);
                }}
                className="tree-element cursor-pointer p-3 flex items-center gap-3 bg-indigo-600 hover:bg-indigo-700 rounded-xl transition duration-200 shadow-md"
              >
                <i className="ri-file-text-line text-xl"></i>
                <p className="font-medium">{file}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="code-editor flex flex-col flex-grow h-full ml-4">
          <div className="bottom flex flex-grow max-w-full shrink overflow-auto bg-indigo-500 rounded-xl shadow-lg p-4 relative">
            <svg
              className="absolute bottom-0 left-0 w-full h-24 text-blue-200/60"
              viewBox="0 0 1440 320"
              preserveAspectRatio="none"
            >
              <path
                fill="currentColor"
                d="M0,224L48,213.3C96,203,192,181,288,181.3C384,181,480,203,576,213.3C672,224,768,224,864,197.3C960,171,1056,117,1152,106.7C1248,96,1344,128,1392,144L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"
              />
            </svg>
            {fileTree[currentFile] ? (
              <div className="code-editor-area h-full overflow-auto flex-grow bg-gray-800 text-white rounded-xl relative">
                <div className="flex justify-between items-center bg-gradient-to-r from-gray-700 to-gray-600 p-3 px-5 rounded-t-xl">
                  <span className="text-sm font-semibold text-white">{currentFile}</span>
                  <button
                    onClick={handleCopy}
                    className="flex items-center gap-2 text-white hover:text-gray-300 transition"
                  >
                    {isCopied ? (
                      <>
                        <i className="ri-check-line"></i>
                        <span className="text-sm">Copied</span>
                      </>
                    ) : (
                      <i className="ri-file-copy-line"></i>
                    )}
                  </button>
                </div>
                <pre className="relative p-5 overflow-auto text-sm leading-6 rounded-b-xl">
                  <code
                    className="hljs block outline-none"
                    contentEditable
                    suppressContentEditableWarning
                    onBlur={(e) => {
                      const updatedContent = e.target.innerText;
                      const ft = {
                        ...fileTree,
                        [currentFile]: { file: { contents: updatedContent } },
                      };
                      setFileTree(ft);
                      saveFileTree(ft);
                    }}
                    dangerouslySetInnerHTML={{
                      __html: hljs.highlight("javascript", fileTree[currentFile].file.contents).value,
                    }}
                    style={{ whiteSpace: "pre-wrap", paddingBottom: "6rem" }}
                  />
                </pre>
              </div>
            ) : (
              <div className="flex items-center justify-center h-full w-full text-white animate-pulse">
                <span className="text-lg font-semibold opacity-75">
                  Code is waiting...
                </span>
              </div>
            )}
          </div>
        </div>

        {iframeUrl && webContainer && (
          <div className="flex min-w-64 flex-col h-full ml-4">
            <div className="address-bar">
              <input
                type="text"
                onChange={(e) => setIframeUrl(e.target.value)}
                value={iframeUrl}
                className="w-full p-3 px-5 bg-gray-700 text-white rounded-t-xl"
              />
            </div>
            <iframe src={iframeUrl} className="w-full h-full bg-gray-50 rounded-b-xl" />
          </div>
        )}
      </section>

      {/* Modal */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-md relative">
            <header className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold text-indigo-600">Select User</h2>
              <button onClick={() => setIsModalOpen(false)} className="p-2 text-gray-600 hover:text-gray-800">
                <i className="ri-close-fill"></i>
              </button>
            </header>
            <div className="users-list flex flex-col gap-3 mb-16 max-h-96 overflow-auto">
              {users.map((user) => (
                <div
                  key={user.id}
                  className={`user cursor-pointer hover:bg-gray-100 rounded-xl p-3 flex gap-3 items-center ${selectedUserId.has(user._id) ? "bg-indigo-500 text-white" : ""
                    }`}
                  onClick={() => {
                    setSelectedUserId((prev) => {
                      const newSet = new Set(prev);
                      newSet.has(user._id) ? newSet.delete(user._id) : newSet.add(user._id);
                      return newSet;
                    });
                  }}
                >
                  <div className="w-10 h-10 flex items-center justify-center bg-indigo-500 text-white rounded-full">
                    <i className="ri-user-fill"></i>
                  </div>
                  <h1 className="font-semibold text-lg">{user.email}</h1>
                </div>
              ))}
            </div>
            <button
              onClick={addCollaborators}
              className="absolute bottom-6 left-1/2 transform -translate-x-1/2 px-6 py-2 text-white rounded-full bg-gradient-to-r from-indigo-500 to-blue-400 hover:from-indigo-600 hover:to-blue-500 transition-all duration-300 shadow-md"
            >
              Add Collaborators
            </button>
          </div>
        </div>
      )}
    </main>
  );
};

export default Project;


